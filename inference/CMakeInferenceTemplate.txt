#
# Copyright (c) 2021, NVIDIA CORPORATION. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# ensure INFERENCE_SOURCES is set
if (NOT INFERENCE_SOURCES)
   message(FATAL_ERROR "You must define non empty INFERENCE_SOURCES variable before including this template")
endif()

set_ifndef(PLUGINS_NEEDED OFF)
set_ifndef(INFERENCE_PARSERS "none")

set(TARGET_DIR ${CMAKE_CURRENT_SOURCE_DIR})

get_filename_component(INFERENCE_DIR ../ ABSOLUTE)
get_filename_component(INFERENCE_DIR_NAME ${TARGET_DIR} NAME)

set(CUDA_INSTALL_DIR /usr/local/cuda)

# COMMON_SOURCES
set(COMMON_SOURCES
    ${INFERENCE_DIR}/common/logger.cpp
)

# add underscores (snake) to camelCase cases
string(REGEX REPLACE "(.)([A-Z][a-z]+)" "\\1_\\2" NAME_SNAKE_MIXED ${INFERENCE_DIR_NAME})
string(REGEX REPLACE "([a-z0-9])([A-Z])" "\\1_\\2" NAME_SNAKE_MIXED ${NAME_SNAKE_MIXED})
string(TOLOWER ${NAME_SNAKE_MIXED} NAME_SNAKE)

# fix a few names
string(REGEX REPLACE "movie_lens" "movielens" NAME_FIXED ${NAME_SNAKE})

set(ENGINE_NAME ${NAME_FIXED})# CACHE STRING "binary name of the engine")

set(TARGET_NAME ${ENGINE_NAME})

add_executable(${TARGET_NAME}
    ${INFERENCE_SOURCES}
    ${COMMON_SOURCES}
)
set(DEPS_LIST "")

if(BUILD_PLUGINS)
    list(APPEND DEPS_LIST nvinfer_plugin)
endif()

if(BUILD_PARSERS)
    list(APPEND DEPS_LIST nvuffparser nvcaffeparser nvonnxparser)
endif()

if(BUILD_PLUGINS OR BUILD_PARSERS)
    add_dependencies(${TARGET_NAME}
        ${DEPS_LIST}
    )
endif()

set(ONNX_INCLUDE_DIR ${PROJECT_SOURCE_DIR}/parsers/onnx CACHE STRING "ONNX include directory")

target_include_directories(${TARGET_NAME}
    PUBLIC ${PROJECT_SOURCE_DIR}/include
    PUBLIC ${ONNX_INCLUDE_DIR}
    PUBLIC ${CUDA_INSTALL_DIR}/include
    PRIVATE ${INFERENCE_DIR}/common
    PRIVATE ${TARGET_DIR}
)

target_compile_options(${TARGET_NAME} PUBLIC "-fno-rtti")

set(DEP_LIBS
    ${CUDART_LIB}
    ${CUBLAS_LIB}
    ${CUDNN_LIB}
    nvinfer
    ${RT_LIB}
    ${CMAKE_DL_LIBS}
    ${CMAKE_THREAD_LIBS_INIT}
)

if(${PLUGINS_NEEDED})
    list(APPEND DEP_LIBS nvinfer_plugin)
endif()

if("caffe" IN_LIST INFERENCE_PARSERS)
    list(APPEND DEP_LIBS nvcaffeparser)
endif()

if("onnx" IN_LIST INFERENCE_PARSERS)
    list(APPEND DEP_LIBS nvonnxparser)
endif()

if("uff" IN_LIST INFERENCE_PARSERS)
    list(APPEND DEP_LIBS nvuffparser)
endif()

# Necessary to link nvinfer_plugin library.
target_link_libraries(${TARGET_NAME}
    ${DEP_LIBS}
    ${CUSTOM_LIBS}
    -Wl,--unresolved-symbols=ignore-in-shared-libs
)

set_target_properties(${TARGET_NAME} PROPERTIES LINK_FLAGS "-Wl,--exclude-libs,ALL")

set_target_properties(${TARGET_NAME} PROPERTIES DEBUG_POSTFIX ${TRT_DEBUG_POSTFIX})

set_target_properties(${TARGET_NAME}
    PROPERTIES
    ARCHIVE_OUTPUT_DIRECTORY "${TRT_OUT_DIR}"
    LIBRARY_OUTPUT_DIRECTORY "${TRT_OUT_DIR}"
    RUNTIME_OUTPUT_DIRECTORY "${TRT_OUT_DIR}"
)

add_dependencies(inference ${TARGET_NAME})

################################### INSTALLATION ########################################

install(TARGETS ${TARGET_NAME}
        RUNTIME DESTINATION bin
        LIBRARY DESTINATION lib
        ARCHIVE DESTINATION lib
)

##################################### SUMMARY ###########################################

get_filename_component(LICENSE_STATUS ../ ABSOLUTE)
get_filename_component(LICENSE_STATUS "${LICENSE_STATUS}" NAME)

message(STATUS "Adding new sample: ${TARGET_NAME}")
message(STATUS "    - Parsers Used: ${INFERENCE_PARSERS}")
message(STATUS "    - InferPlugin Used: ${PLUGINS_NEEDED}")
message(STATUS "    - Licensing: ${LICENSE_STATUS}")
